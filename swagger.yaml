openapi: 3.0.0
info:
  title: Project-X
  contact: {}
  version: '1.0'
paths:
  /oauth/token:
    post:
      tags:
        - User
      summary: Get bearer token
      operationId: GetToken
      parameters:
        - name: Content-Type
          in: header
          required: true
          style: simple
          schema:
            type: string
            example: application/x-www-form-urlencoded
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding: {}
            schema:
              required:
                - grant_type
                - username
                - password
              type: object
              properties:
                grant_type:
                  type: string
                  example: password
                username:
                  type: string
                  example: username
                password:
                  type: string
                  example: password
        required: true
        x-send-file-in-body: false
      responses:
        200:
          description: 'Response with valid granted token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        400:
          description: 'Invalid credentials'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseOauth'
      deprecated: false
      security: [{}]
  /user/create:
    post:
      tags:
        - User
      summary: Create user
      operationId: Createuser
      parameters:
        - name: Content-Type
          in: header
          required: true
          style: simple
          schema:
            type: string
            example: application/json
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateuserRequest'
            example:
              username: string
              password: string
              email: string
        required: true
        x-send-file-in-body: false
      responses:
        201:
          description: 'User has been created'
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedUserResponseOk'
        400:
          description: 'Invialid properties'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: 'Database error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
      security: [{}]
  /user/password:
    post:
      tags:
        - User
      summary: Change password
      operationId: Change password
      parameters:
        - name: Content-Type
          in: header
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          required: true
          style: simple
          schema:
            type: string
            example: Bearer {token}
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangepasswordRequest'
            example:
              oldPassword: string
              newPassword: string
        required: true
        x-send-file-in-body: false
      responses:
        200:
          description: 'Password has been changed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShortResponseOk'
        400:
          description: 'Invalid properties'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: 'Invalid token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseOauth'
        500:
          description: 'Database error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
  /user/all:
    get:
      tags:
        - User
      summary: List of users
      operationId: Listofusers
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          schema:
            type: string
            example: Bearer {token}
      responses:
        200:
          description: 'Listed all users'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListedUsersResponseOk'
        401:
          description: 'Invalid token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseOauth'
        403:
          description: 'Forbidden action'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseOauth'
        500:
          description: 'Database error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
  /location/create:
    post:
      tags:
        - Location
      summary: Create Location
      operationId: Create Location
      parameters:
        - name: Content-Type
          in: header
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          required: true
          style: simple
          schema:
            type: string
            example: Bearer {token}
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationObject'
            example:
              name: string
              description: string
              roles:
                - name: string
                  description: string
        required: true
        x-send-file-in-body: false
      responses:
        201:
          description: 'Location has been created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditLocationResponseOk'

        400:
          description: 'Invalid properties'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: 'Invalid token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseOauth'
        500:
          description: 'Database error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
  /location/my_locations:
    get:
      tags:
        - Location
      summary: List of all user's locations
      operationId: Listofalluser'slocations
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          schema:
            type: string
            example: Bearer {token}
      responses:
        200:
          description: "Listed user's locations"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationResponseOk'
        401:
          description: 'Invalid token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseOauth'
        500:
          description: 'Database error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
  /location/{locationId}:
    get:
      tags:
        - Location
      summary: Get location by ID
      operationId: GetlocationbyID
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          schema:
            type: string
            example: Bearer {token}
        - in: path
          name: locationId
          required: true
          schema:
            type: string
          description: Id of the location
          example: location id
      responses:
        200:
          description: 'Listed location'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditLocationResponseOk'
        401:
          description: 'Invalid token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseOauth'
        404:
          description: 'Resource has not been found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
    delete:
      tags:
        - Location
      summary: Delete location by ID
      operationId: DeletelocationbyID
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          schema:
            type: string
            example: Bearer {token}
        - in: path
          name: locationId
          required: true
          schema:
            type: string
          description: Id of the location
          example: location id
      responses:
        200:
          description: 'Location has been deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShortResponseOk'
        401:
          description: 'Invalid token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseOauth'
        403:
          description: 'Forbidden action'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: 'Resource has not been found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: 'Database error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
    put:
      tags:
        - Location
      summary: Edit location
      operationId: Editlocation
      parameters:
        - name: Content-Type
          in: header
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          required: true
          style: simple
          schema:
            type: string
            example: Bearer {token}
        - in: path
          name: locationId
          required: true
          schema:
            type: string
          description: Id of the location
          example: location id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationObject'
            example:
              name: string
              description: string
              roles:
                - name: string
                  description: string
                - name: string
                  description: string
                - name: string
                  description: string
        required: true
        x-send-file-in-body: false
      responses:
        200:
          description: 'Location has been edited'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditLocationResponseOk'
        401:
          description: 'Invalid token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseOauth'
        403:
          description: 'Forbidden action'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: 'Resource has not been found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: 'Database error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
  /game/create:
    post:
      tags:
        - Game
      summary: Create game
      operationId: Creategame
      parameters:
        - name: Content-Type
          in: header
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          required: true
          style: simple
          schema:
            type: string
            example: Bearer {token}
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreategameRequest'
            example:
              location:
                id: "string"
        required: true
        x-send-file-in-body: false
      responses:
        200:
          description: 'game has been created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameResponseOk'

        400:
          description: 'Invalid properties'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: 'Invalid token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseOauth'
        404:
          description: 'resource has not been found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: 'Database error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

      deprecated: false
  /game/all:
    get:
      tags:
        - Game
      summary: Get list of games
      operationId: Getlistofgames
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          schema:
            type: string
            example: Bearer {token}
      responses:
        200:
          description: 'list of existing games'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameListResponseOk'
        401:
          description: 'Invalid token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseOauth'
        403:
          description: 'action forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseOauth'
      deprecated: false
  /game/all/user:
    get:
      tags:
        - Game
      summary: Get list of user games
      operationId: Getlistofusergames
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          schema:
            type: string
            example: Bearer {token}
      responses:
        200:
          description: 'user games found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameListResponseOk'
        401:
          description: 'Invalid token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseOauth'
        500:
          description: 'Database error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

      deprecated: false
  /game/{gameId}:
    get:
      tags:
        - Game
      summary: Get game by ID
      operationId: GetgamebyID
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          schema:
            type: string
            example: Bearer {token}
        - in: path
          name: gameId
          required: true
          schema:
            type: string
          description: Id of the game
          example: Game ID
      responses:
        200:
          description: 'game of corresponding id has been found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameResponseOk'
        401:
          description: 'Invalid token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseOauth'
        403:
          description: 'action forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseOauth'

        404:
          description: 'resource has not been found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: 'Database error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

      deprecated: false

    delete:
      tags:
        - Game
      summary: Delete game by ID
      operationId: DeletegamebyID
      parameters:
        - in: path
          name: gameId
          required: true
          schema:
            type: string
          description: Id of the game
          example: Game ID
        - name: Authorization
          in: header
          required: true
          style: simple
          schema:
            type: string
            example: Bearer {token}
      responses:
        200:
          description: 'Game has been deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShortResponseOk'
        401:
          description: 'Invalid token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseOauth'
        403:
          description: 'Action forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseOauth'

        404:
          description: 'Resource has not been found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: 'Database error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false

  /game/start/{gameId}:
    get:
      tags:
        - Game
      summary: Get started game by ID for player
      operationId: GetfinishedgamebyID
      parameters:
        - in: path
          name: gameId
          required: true
          schema:
            type: string
          description: Id of the game
          example: Game ID
        - name: Authorization
          in: header
          required: true
          style: simple
          schema:
            type: string
            example: Bearer {token}
      responses:
        200:
          description: 'Info about the game for player'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameInfoOk'

        401:
          description: 'Invalid token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseOauth'
        403:
          description: 'action forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseOauth'

        404:
          description: 'resource has not been found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: 'Database error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
    put:
      tags:
        - Game
      summary: Start the game
      operationId: StartGame
      parameters:
        - name: Content-Type
          in: header
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - in: path
          name: gameId
          required: true
          schema:
            type: string
          description: Id of the game
          example: Game ID
      responses:
        200:
          description: 'Game has started'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShortResponseOk'

        401:
          description: 'Invalid token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseOauth'
        403:
          description: 'action forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseOauth'

        404:
          description: 'resource has not been found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: 'Database error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false

  /game/join/{gameId}:
    put:
      tags:
        - Game
      summary: Add new player to game
      operationId: Addnewplayertogame
      parameters:
        - name: Content-Type
          in: header
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          required: true
          style: simple
          schema:
            type: string
            example: Bearer {token}
        - in: path
          name: gameId
          required: true
          schema:
            type: string
          description: Id of the game
          example: Game ID
      responses:
        200:
          description: 'New player has joined the game'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameResponseOk'

        401:
          description: 'Invalid token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseOauth'
        403:
          description: 'action forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseOauth'

        404:
          description: 'resource has not been found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: 'Database error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false

  /game/{gameId}/location/{locationId}:
    put:
      tags:
        - Game
      summary: Change game location
      operationId: Changegamelocation
      parameters:
        - name: Content-Type
          in: header
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          required: true
          style: simple
          schema:
            type: string
            example: Bearer {token}
        - in: path
          name: gameId
          required: true
          schema:
            type: string
          description: Id of the game
          example: Game ID
        - in: path
          name: locationId
          required: true
          schema:
            type: string
          description: Id of the location
          example: Location ID
      responses:
        200:
          description: 'Game location has changed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameResponseOk'

        401:
          description: 'Invalid token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseOauth'
        403:
          description: 'action forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseOauth'

        404:
          description: 'resource has not been found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: 'Database error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false

  /game/finish/{gameId}:
    put:
      tags:
        - Game
      summary: Finish Game
      operationId: FinishGame
      parameters:
        - name: Content-Type
          in: header
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - in: path
          name: gameId
          required: true
          schema:
            type: string
          description: Id of the game
          example: Game ID
      responses:
        200:
          description: 'Game location has changed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShortResponseOk'

        401:
          description: 'Invalid token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseOauth'
        403:
          description: 'action forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseOauth'

        404:
          description: 'resource has not been found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: 'Database error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false

components:
  schemas:
    CreateuserRequest:
      title: CreateuserRequest
      required:
        - username
        - password
        - email
      type: object
      properties:
        username:
          type: string
          description: 'min length: 5'
        password:
          type: string
          description: 'min length: 8'
        email:
          type: string
          description: 'valid email'
      example:
        username: string
        password: string
        email: string
    ChangepasswordRequest:
      title: Change password
      required:
        - oldPassword
        - newPassword
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
      example:
        oldPassword: string
        newPassword: string

    CreategameRequest:
      title: CreategameRequest
      required:
        - location
      type: object
      properties:
        location:
          $ref: '#/components/schemas/Location'
      example:
        location:
          id: 55e778446a7b11b0001612e89
    Location:
      title: Location
      required:
        - id
      type: object
      properties:
        id:
          type: string
      example:
        id: 55e778446a7b11b0001612e89

    TokenResponse:
      title: Access token
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
        expires_in:
          type: integer
        scope:
          type: string
        jti:
          type: string


    ListedUsersResponseOk:
      title: Created user
      type: object
      properties:
        type:
          type: string
        message:
          type: string
        signedUsers:
          $ref: '#/components/schemas/ArrayOfUser'

    CreatedUserResponseOk:
      title: Created user
      type: object
      properties:
        type:
          type: string
        message:
          type: string
        user:
          $ref: '#/components/schemas/UserObject'


    UserObject:
      title: User object
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        authority:
          type: string
        enabled:
          type: boolean
        signedDate:
          type: string
        lastLogged:
          type: string

    ArrayOfUser:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/UserObject'

    ErrorResponse:
      title: Error response
      type: object
      properties:
        type:
          type: string
        message:
          type: string
        description:
          type: string
        status:
          type: string

    ErrorResponseOauth:
      title: Error oauth response
      type: object
      properties:
        error:
          type: string
        error_description:
          type: string

    ShortResponseOk:
      title: Change ok
      type: object
      properties:
        type:
          type: string
        message:
          type: string

    ListLocationResponseOk:
      properties:
        type:
          type: string
        message:
          type: string
        locations:
          $ref: '#/components/schemas/ArrayOfLocations'


    ArrayOfLocations:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/LocationObject'

    EditLocationResponseOk:
      properties:
        type:
          type: string
        message:
          type: string
        location:
          $ref: '#/components/schemas/LocationObject'

    LocationObject:
      title: Location Object
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        roles:
          $ref: '#/components/schemas/ArrayOfRoles'
        date:
          type: string

    RoleObject:
      title: Role Object
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string

    ArrayOfRoles:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/RoleObject'


    GameInfoOk:
      title: info about the game
      type: object
      properties:
        type:
          type: string
        message:
          type: string
        playerRole:
          $ref: '#/components/schemas/RoleObject'
        location:
          $ref: '#/components/schemas/LocationObject'
        date:
          type: string

    ArrayOfGames:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/GameObject'


    GameObject:
      title: Game Object
      type: object
      properties:
        id:
          type: string
        host:
          $ref: '#/components/schemas/UserObject'
        gameTime:
          type: string
        location:
          $ref: '#/components/schemas/LocationObject'
        playersWithRoles:
          type: object
          properties:
            player:
              $ref: '#/components/schemas/RoleObject'

    GameListResponseOk:
      title: Created Game
      type: object
      properties:
        type:
          type: string
        message:
          type: string
        existingGames:
          $ref: '#/components/schemas/ArrayOfGames'


    GameResponseOk:
      title: Created Game
      type: object
      properties:
        type:
          type: string
        message:
          type: string
        game:
          $ref: '#/components/schemas/GameObject'


  securitySchemes:
    BearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT


security:
  - BearerAuth: []
tags:
  - name: User
  - name: Location
  - name: Game
    description: Endpoint requests for game service